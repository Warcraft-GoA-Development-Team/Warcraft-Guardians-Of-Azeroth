namespace=WCCLN

#ROOT is the demander, FROM is the vassal
character_event = {
	id = WCCLN.8

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		FROM = {
			character_event = { id = WCCLN.9 }
		}
	}
}

#ROOT is the vassal, FROM is the demander
character_event = {
	id = WCCLN.9

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# Fires for the vassal and each of his courtiers and vassals.
		# Note: needs to fire for vassals/courtier before character
		# FROMFROM is the demander. FROM is the vassal. ROOT is the character.
		any_courtier = {
			character_event = { id = 39700 }
		}
		any_vassal = {
			character_event = { id = 39700 }
		}
		character_event = { id = 39700 }
	}
}

# Marriage fixes
character_event = {
	id = WCCLN.100

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_alive = yes
		is_dying = no
		
		new_character = { FROM = { can_has_sexual_relation_with_prev = no } }
	}

	immediate = {
		new_character = {
			save_event_target_as = target_other_spouse
			character_event = { id = WCRAC.10 }		# Adds race trait just for sure
			FROM = {
				save_event_target_as = target_spouse
				
				character_event = { id = WCRAC.10 }		# Adds race trait just for sure
				if = {
					limit = { can_has_sexual_relation_with_prev = no }
					character_event = { id = WCCLN.101 days = 1 }
				}
			}
		}
	}
}
character_event = {
	id = WCCLN.101

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		if = {
			limit = { trait = cannot_marry_trait }
			log = "(IMPORTANT) [This.GetBestName] cannot_marry, but tried to marry"
		}
		
		if = {
			limit = {
				OR = {
					is_betrothed = yes
					is_marriage_adult = no
					event_target:target_other_spouse = { is_marriage_adult = no }
				}
			}
			break_betrothal = event_target:target_other_spouse
			
			# target_other_spouse and her/his relatives get bad opinion of FROM, the one who organized marriage
			event_target:target_other_spouse = {
				opinion = { modifier = opinion_betrothal_broken who = FROM }
				any_close_relative = { opinion = { modifier = opinion_betrothal_broken who = FROM } }
			}
		}
		else = {
			remove_spouse = event_target:target_other_spouse
			
			opinion = { modifier = opinion_divorced who = event_target:target_other_spouse }
			any_close_relative = { opinion = { modifier = opinion_divorced_relative who = event_target:target_other_spouse } }
		}
		
		# Sends characters back
		if = {
			limit = { is_ruler = no }
			move_character = FROM
		}
		
		# Send notification
		character_event = { id = WCCLN.113 days = 1 }					# Must be delayed to make sure character is moved
		if = {
			limit = { NOT = { character = FROM } }
			FROM = { character_event = { id = WCCLN.113 days = 1 } }	# Must be delayed to make sure character is moved
		}

		if = {
			limit = {
				is_pregnant = yes 
				father_of_unborn = { character = event_target:target_other_spouse }
			}
			death = { death_reason = death_childbirth }
			break = yes
		}
		# Set cannot_marry flag or find right spouse
		set_cannot_marry_or_find_spouse_effect = yes
	}
}
# Notification about divorce for ROOTs from WCCLN.100 event
character_event = {
	id = WCCLN.113
	desc = EVTDESC_WCCLN_113
	picture = GFX_evt_gift
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	trigger = { ai = no }

	option = {
		name = I_SEE
	}
}

# Finds right spouse
character_event = {
	id = WCCLN.130

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		ai = yes
			
		is_married = no
		is_betrothed = no
			
		is_in_player_sphere_of_influence_trigger = no
	}

	immediate = {
		# Finds spouse...
		# For adults only
		if = {
			limit = {
				is_marriage_adult = yes
				
				any_realm_character = {
					ai = yes
					is_incapable = no
					prisoner = no
					is_inaccessible_trigger = no

					is_marriage_adult = yes
					can_marry = yes
					can_marry_trigger = yes
					can_has_sexual_relation_with_prev = yes

					NOT = { is_close_relative = ROOT }
					is_consort = no
					is_married = no
					is_opposite_sex = ROOT
					is_pregnant = no
				}
			}
			random_realm_character = {
				limit = {
					ai = yes
					is_incapable = no
					prisoner = no
					is_inaccessible_trigger = no

					is_marriage_adult = yes
					can_marry = yes
					can_marry_trigger = yes
					can_has_sexual_relation_with_prev = yes

					NOT = { is_close_relative = ROOT }
					is_consort = no
					is_married = no
					is_opposite_sex = ROOT
					is_pregnant = no
				}
				preferred_limit = {
					is_lover = ROOT
				}
				preferred_limit = {
					has_prev_race_trigger = yes
				}
				preferred_limit = {
					is_lowborn = yes
				}
				save_event_target_as = target_new_spouse
			}
		}
		# ...if can't find, spawns spouse
		else = {
			log = "[This.GetBestName] spawned a spouse"
			if = {
				limit = { is_female = no }
				create_character = {
					female = yes
					dynasty = actually_culture
					culture = ROOT religion = ROOT
					random_traits = yes
					age = 17
					flag = spawned_spouse_flag
					flag = race_delay_flag
				}
				new_character = {
					set_prev_gfx_effect = yes
					character_event = { id = WCRAC.10 }
					
					save_event_target_as = target_new_spouse
				}
			}
			else = {
				create_character = {
					dynasty = actually_culture
					culture = ROOT religion = ROOT
					random_traits = yes
					age = 17
					flag = spawned_spouse_flag
					flag = race_delay_flag
				}
				new_character = {
					set_prev_gfx_effect = yes
					character_event = { id = WCRAC.10 }
					
					save_event_target_as = target_new_spouse
				}
			}
		}
		
		event_target:target_new_spouse = {
			ROOT = {
				if = {
					limit = { can_has_sexual_relation_with_prev = yes }
					if = {
						limit = {
							OR = {
								is_marriage_adult = no
								event_target:target_new_spouse = { is_marriage_adult = no }
							}
						}
						prev_add_betrothal_this_effect = yes
					}
					else_if = {
						limit = { is_female = no }
						prev_add_spouse_this_effect = yes
					}
					else = {
						prev_add_spouse_matrilineal_this_effect = yes
					}
				}
				else = {
					log = "(IMPORTANT) [This.GetBestName] killed a spouse"
					set_cannot_marry_flag_effect = yes
					PREV = { death = { death_reason = death_murder_fall killer = ROOT } }
				}
			}
		}
	}
}

# Harem fixes
character_event = {
	id = WCCLN.200

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# Adds race trait just for sure
		any_consort = {
			if = {
				limit = { can_has_sexual_relation_with_prev = no }
				remove_consort = PREV
				opinion = { modifier = opinion_set_aside who = PREV }
				PREV = {
					if = {
						limit = {
							is_pregnant = yes
							father_of_unborn = { character = PREV }
						}
						death = { death_reason = death_childbirth }
					}
					# Set cannot_marry flag or find right spouse
					set_cannot_marry_or_find_spouse_effect = yes
				}
				if = {
					limit = {
						is_pregnant = yes
						father_of_unborn = { character = PREV }
					}
					death = { death_reason = death_childbirth }
				}
				# Set cannot_marry flag or find right spouse
				set_cannot_marry_or_find_spouse_effect = yes
			}
		}
		FROM = {
			# Adds race trait just for sure
			any_consort = {
				if = {
					limit = { can_has_sexual_relation_with_prev = no }
					remove_consort = PREV
					opinion = { modifier = opinion_set_aside who = PREV }
					PREV = {
						if = {
							limit = {
								is_pregnant = yes
								father_of_unborn = { character = PREV }
							}
							death = { death_reason = death_childbirth }
						}
						# Set cannot_marry flag or find right spouse
						set_cannot_marry_or_find_spouse_effect = yes
					}
					if = {
						limit = {
							is_pregnant = yes
							father_of_unborn = { character = PREV }
						}
						death = { death_reason = death_childbirth }
					}
					# Set cannot_marry flag or find right spouse
					set_cannot_marry_or_find_spouse_effect = yes
				}
			}
		}
	}
}

# on_decade_pulse
# Gives class trait to AI character
character_event = {
	id = WCCLN.300
	
	is_triggered_only = yes
	hide_window = yes
	
	ai = yes
	min_age = 16
	only_capable = yes
	prisoner = no
	
	trigger = {
		is_untouchable_trigger = no
		
		has_class_trait_trigger = no
		united_class_trigger = yes
		
		is_in_player_sphere_of_influence_trigger = no
	}
	
	immediate = {
		ai_add_random_class_effect = yes
	}
}