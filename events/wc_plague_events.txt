namespace = WCPOD

# The Plague of <paste here location> has started
narrative_event = {
	id = WCPOD.2000
	picture = GFX_evt_plague_eruptor
	title = {
		trigger = { has_global_flag = plague_of_northrend_triggered_flag }
		text = EVTTITLE_WCPOD_2000_northrend
	}
	title = {
		trigger = { has_global_flag = plague_of_lordaeron_triggered_flag }
		text = EVTTITLE_WCPOD_2000_lordaeron
	}
	desc = {
		trigger = { has_global_flag = plague_of_northrend_triggered_flag }
		text = EVTDESC_WCPOD_2000_northrend
	}
	desc = {
		trigger = { has_global_flag = plague_of_lordaeron_triggered_flag }
		text = EVTDESC_WCPOD_2000_lordaeron
	}
	border = GFX_event_narrative_frame_intrigue

	is_triggered_only = yes

	major = yes
	major_trigger = {
		ai = no
	}
	show_root = yes

	immediate = {
		if = {
			limit = { has_global_flag = plague_of_lordaeron_triggered_flag }

			73 = { province_event = { id = WCTHW.50 } } # When shit happens, Medivh tries to fix it

			# Starts "Arthas's" event chain
			# Fires for current_heir of top_liege of Andorhal (first province with the Plague)
			315 = {
				holder_scope = {
					top_liege = {
						if = {
							limit = {
								OR = {
									is_feudal = yes
									is_tribal = yes
								}

								can_be_undead_trigger = yes
								trait = creature_human
								religion_group = light_group

								NOT = { has_global_flag = arthas_chain_ongoing }
								NOT = { has_global_flag = frostmourne_spawned_flag }

								current_heir = {
									is_inaccessible_trigger = no
									
									scourge_champion_event_trigger = yes
									OR  = {
										has_evil_trait_trigger = yes
										has_unpleasant_trait_trigger = yes
										has_impious_trait_trigger = yes
									}
								}
							}
							primary_title = { save_event_target_as = target_realm }
							current_heir = {
								save_event_target_as = target_champion

								set_global_flag = arthas_chain_ongoing
								
								add_trait = travelling

								73 = { province_event = { id = WCTHW.1999 days = 15 } }
							}
						}
					}
				}
			}
		}
	}

	option = {
		trigger = {
			OR = {
				true_religion = death_god
				AND = {
					has_global_flag = scourge_is_under_legion_control_flag
					true_religion = burning_legion_religion
				}
			}
		}
		name = DEATH_IS_COMING
	}
	option = {
		trigger = {
			NOT = {
				true_religion = death_god
				AND = {
					has_global_flag = scourge_is_under_legion_control_flag
					true_religion = burning_legion_religion
				}
			}
			evil_true_religion_trigger = yes
		}
		name = FOOLS
	}
	option = {
		trigger = {
			NOT = {
				evil_true_religion_trigger = yes
			}
		}
		name = ALAS
	}
	option = {
		trigger = {
			NOT = {
				evil_true_religion_trigger = yes
			}
			NOT = { character = ROOT }
		}
		name = INTERESTING
	}
}

# Plague of Undeath: cramps cough fatigue
character_event = {
	id = WCPOD.5012

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		# log = "WCPOD.5012 fired for [Root.GetBestName]"
		random_list = {
			100 = {
				modifier = {
					factor = 0
					trait = cramps
					trait = cough
					trait = fatigue
				}
				add_plague_of_undead_symptom_effect = yes
			}
			50 = {
				modifier = {
					factor = 0
					NOR = {
						trait = cramps
						trait = cough
						trait = fatigue
					}
				}
				if = {
					limit = { can_be_undead_trigger = yes }
					e_scourge = { holder_scope = { save_event_target_as = target_necromancer } }
					character_event = { id = WCPOD.5013 }
				}
				else = { death = { death_reason = death_poor_health } }
			}
		}
	}
}
# Plague of Undeath: cramps cough fatigue
# Also works as the only event that turns a character into an undead
# P.S. Except created forms (like abominations)
character_event = {
	id = WCPOD.5013
	desc = {
		trigger = { has_character_flag = got_plague_of_undeath }
		text = EVTDESC_WCPOD_5013_plague
	}
	desc = {
		trigger = {
			NOT = { has_character_flag = got_plague_of_undeath }
			NOT = { event_target:target_necromancer = { character = ROOT } }
			event_target:target_necromancer = { is_alive = yes }
			NOR = {
				has_character_flag = transition_into_wraith_flag
				has_character_flag = transition_into_lich_flag
			}
		}
		text = EVTDESC_WCPOD_5013_walking_undead
	}
	desc = {
		trigger = {
			NOT = { has_character_flag = got_plague_of_undeath }
			NOT = { event_target:target_necromancer = { character = ROOT } }
			event_target:target_necromancer = { is_alive = yes }
			has_character_flag = transition_into_wraith_flag
		}
		text = EVTDESC_WCPOD_5013_ghost
	}
	desc = {
		trigger = {
			NOT = { has_character_flag = got_plague_of_undeath }
			NOT = { event_target:target_necromancer = { character = ROOT } }
			event_target:target_necromancer = { is_alive = yes }
			has_character_flag = transition_into_lich_flag
		}
		text = EVTDESC_WCPOD_5013_lich
	}
	desc = {
		trigger = {
			NOT = { has_character_flag = got_plague_of_undeath }
			NOT = { event_target:target_necromancer = { character = ROOT } }
			event_target:target_necromancer = { is_alive = yes }
			has_character_flag = transition_into_wickerman_flag
		}
		text = EVTDESC_WCPOD_5013_wickerman
	}
	desc = {
		trigger = {
			NOT = { has_character_flag = got_plague_of_undeath }
			NOT = { event_target:target_necromancer = { character = ROOT } }
			event_target:target_necromancer = { is_alive = yes }
			has_character_flag = transition_into_wicker_behemoth_flag
		}
		text = EVTDESC_WCPOD_5013_wicker_behemoth
	}
	desc = {
		trigger = {
			NOT = { has_character_flag = got_plague_of_undeath }
			NOT = { event_target:target_necromancer = { character = ROOT } }
			event_target:target_necromancer = { is_alive = yes }
			has_character_flag = transition_into_wicker_golem_flag
		}
		text = EVTDESC_WCPOD_5013_wicker_golem
	}
	desc = {
		trigger = {
			NOT = { has_character_flag = got_plague_of_undeath }
			OR = {
				event_target:target_necromancer = { character = ROOT }
				event_target:target_necromancer = { is_alive = no }
				NOT = { event_target:target_necromancer = { always = yes } }
			}
		}
		text = EVTDESC_WCPOD_5013_self
	}
	picture = GFX_evt_cemetery
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	trigger = {
		OR = {
			NOT = { trait = being_undead }									# Mustn't be undead

			# Exceptions
			has_character_flag = transition_into_death_knight_flag			# Event changes your class...
			has_character_flag = transition_into_wraith_flag				# Event changes your race...
			has_character_flag = transition_into_abomination_flag			# Event changes your race...
			has_character_flag = transition_into_lich_flag					# Event changes your race...
			has_character_flag = transition_into_wickerman_flag				# Event changes your race...
			has_character_flag = transition_into_wicker_behemoth_flag		# Event changes your race...
			has_character_flag = transition_into_wicker_golem_flag			# Event changes your race...
			has_character_flag = transition_into_vampire_flag				# Event gives you vampire trait...
		}																	# ...so being_undead isn't important
		OR = {
			can_be_undead_trigger = yes										# Only if can be undead

			# Exceptions
			has_character_flag = transition_into_wraith_flag				# Event changes your race...
			has_character_flag = transition_into_abomination_flag			# Event changes your race...
			has_character_flag = transition_into_lich_flag					# Event changes your race...
			has_character_flag = transition_into_wickerman_flag				# Event changes your race...
			has_character_flag = transition_into_wicker_behemoth_flag		# Event changes your race...
			has_character_flag = transition_into_wicker_golem_flag			# Event changes your race...
			has_undead_gfx_trigger = yes									# You already have undead portrait...
		}																	# ...so can_be_undead_trigger isn't important
	}

	immediate = {
		log = "WCPOD.5013 fired for [Root.GetBestName]"
		if = {
			limit = {
				OR = {
					NOT = { event_target:target_necromancer = { always = yes } }
					event_target:target_necromancer = {
						NOT = { character = ROOT }
						is_alive = no
					}
				}
			}
			clear_event_target = target_necromancer
			if = {
				limit = {
					e_scourge = { has_holder = yes }
					has_character_flag = got_plague_of_undeath
				}
				e_scourge = { holder_scope = { save_event_target_as = target_necromancer } }
			}
			else = {
				save_event_target_as = target_necromancer
			}
		}
		if = {
			limit = { has_character_flag = transition_into_death_knight_flag }
			add_character_modifier = { name = training_self_death_knight duration = -1 }
			recount_experience_effect = yes
			# Set 5 level if you don't have class
			if = {
				limit = { NOT = { check_variable = { which = wc_experience_death_knight value = 1 } } }
				set_variable = { which = wc_experience_death_knight value = 5 }
			}
		}
	}

	option = {
		name = {
			trigger = {
				NOT = {
					true_religion_group = necromancy_group
					character = event_target:target_necromancer
				}
			}
			text = ALAS
		}
		name = {
			trigger = {
				OR = {
					true_religion_group = necromancy_group
					character = event_target:target_necromancer
				}
			}
			text = EXCELLENT
		}

		# Race traits
		trigger_switch = {
			on_trigger = has_character_flag
			transition_into_death_knight_flag = {
				add_class_trait_effect = yes
				clr_character_flag = transition_into_death_knight_flag
			}
			transition_into_wraith_flag = {
				remove_racial_traits_effect = yes
				add_trait = creature_wraith
				hidden_effect = { set_graphical_culture = shade }
				clr_character_flag = transition_into_wraith_flag
			}
			transition_into_abomination_flag = {
				remove_racial_traits_effect = yes
				add_trait = creature_abomination
				hidden_effect = { set_graphical_culture = abomination }
				clr_character_flag = transition_into_abomination_flag
			}
			transition_into_lich_flag = {
				remove_racial_traits_effect = yes
				add_trait = creature_lich
				hidden_effect = { set_graphical_culture = lich }
				clr_character_flag = transition_into_lich_flag
			}
			transition_into_wickerman_flag = {
				remove_racial_traits_effect = yes
				add_trait = creature_wickerman
				hidden_effect = { set_graphical_culture = wickerman }
				clr_character_flag = transition_into_wickerman_flag
			}
			transition_into_wicker_behemoth_flag = {
				remove_racial_traits_effect = yes
				add_trait = creature_wicker_behemoth
				hidden_effect = { set_graphical_culture = wicker_behemoth }
				clr_character_flag = transition_into_wickerman_flag
			}
			transition_into_wicker_golem_flag = {
				remove_racial_traits_effect = yes
				add_trait = creature_wicker_golem
				hidden_effect = { set_graphical_culture = wicker_golem }
				clr_character_flag = transition_into_wicker_golem_flag
			}
			transition_into_vampire_flag = {
				add_trait = vampire
				clr_character_flag = transition_into_vampire_flag
			}
		}
		add_trait_undead_effect = yes

		# Fixes immortal age
		add_age_back_effect = yes

		if = {
			limit = {
				prisoner = yes
				host = { character = event_target:target_necromancer }
			}
			imprison = no
			if = {
				limit = { is_ruler = no }
				move_character = event_target:target_necromancer
			}
		}

		# Who is your lord?
		# Necromancer
		if = {
			limit = {
				event_target:target_necromancer = { NOT = { character = ROOT } }
				NOT = { e_scourge = { holder_scope = { character = event_target:target_necromancer } } }
			}
			if = {
				limit = { NOT = { has_opinion_modifier = { who = event_target:target_necromancer modifier = opinion_loyal_servant } } }
				opinion = {
					modifier = opinion_loyal_servant
					who = event_target:target_necromancer
				}
			}
			if = {
				limit = { event_target:target_necromancer = { NOT = { true_religion = death_god } } }
				religion = event_target:target_necromancer
				set_secret_religion = event_target:target_necromancer
			}
		}
		# Lich King if your necromancer worships e_scourge religion
		if = {
			limit = {
				can_be_mind_controlled_by_scourge_trigger = yes
				e_scourge = {
					has_holder = yes
					holder_scope = {
						OR = {
							character = event_target:target_necromancer
							religion = { target = event_target:target_necromancer target_type = true }
						}
					}
				}
			}
			character_event = { id = WCUND.1108 }		# Check religion #Must happen instantly 
		}
	}
}
# Consequences of the Plague
province_event = {
	id = WCPOD.10000

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		save_event_target_as = target_province
		
		e_scourge = { holder_scope = { save_event_target_as = target_province_holder } }	# Used in convert_to_target_undead_province_effect

		e_scourge = {
			holder_scope = {
				spawn_plague_troops_effect = yes
			}
		}
		convert_to_target_undead_province_effect = yes
		culture = scourge
		holder_scope = {
			top_liege = {
				if = {
					limit = {
						e_scourge = {
							holder_scope = {
								NOT = { character = PREVPREV }
								NOT = { any_current_enemy = { character = PREVPREVPREV } }
							}
						}
					}
					character_event = { id = WCPOD.10001 }
				}
			}
		}
	}
}
# Stand against the Plague?
character_event = {
	id = WCPOD.10001
	desc = EVTDESC_WCPOD_10000
	picture = GFX_evt_scourge_army
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	
	immediate = {
		set_character_flag = event_war_exception_flag
	}

	# Yes
	option = {
		trigger = {
			e_scourge = {
				holder_scope = {
					can_use_cb = {
						target = ROOT
						casus_belli = scourge_subjugation
						only_check_triggers = yes
					}
				}
			}
		}
		name = EVTOPTA_WCPOD_10001

		e_scourge = {
			show_scope_change = no
			
			holder_scope = {
				show_scope_change = no
				
				war = {
					target = ROOT
					casus_belli = scourge_subjugation
					thirdparty_title = ROOT
					infamy = 0
				}
			}
		}

		ai_chance = {
			factor = 90

			modifier = {
				factor = 0.01
				primary_title = { title = k_gilneas }
				275 = {
					OR = {
						has_province_modifier = the_greymane_wall
						has_province_modifier = the_gilnean_wall
					}
				}
			}
		}
	}

	# No
	option = {
		name = EVTOPTB_WCPOD_10001

		e_scourge = {
			show_scope_change = no
			holder_scope = {
				show_scope_change = no
				FROM = {
					show_scope_change = no
					county = { grant_title_no_opinion = { target = PREVPREV type = invasion } }
				}
			}
		}

		ai_chance = {
			factor = 10
		}
	}
	
	after = {
		clr_character_flag = event_war_exception_flag
	}
}
# Notification
character_event = {
	id = WCPOD.10002
	desc = EVTDESC_WCPOD_10000
	picture = GFX_evt_scourge_army
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = ALAS
	}
}